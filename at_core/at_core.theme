<?php

use Drupal\Core\Template\Attribute;
use Drupal\Core\Language\Language;
use Drupal\Core\Theme\ThemeSettings;
use Drupal\Core\Url;
use Drupal\user\UserInterface;
use Drupal\image\Entity\ImageStyle;
use Drupal\Component\Utility\String;
use Drupal\Component\Utility\Xss;
use Drupal\Component\Utility\Tags;
use Drupal\Component\Utility\Html;
use Drupal\node\NodeInterface;

use Drupal\at_core\Theme\ThemeInfo;
use Drupal\at_core\Library\SystemLibraries;
use Drupal\at_core\Library\ThemeLibraries;
use Drupal\at_core\Layout\Layout;
use Drupal\at_core\Layout\LayoutLoad;

/**
 * Alter attachments (typically assets) to a page before it is rendered.
 *
 * Use this hook when you want to remove or alter attachments on the page, or
 * add attachments to the page that depend on another module's attachments (this
 * hook runs after hook_page_attachments().
 *
 * @param array &$page
 *   An empty renderable array representing the page.
 *
 * @see hook_page_attachments_alter()
 */
function at_core_page_attachments_alter(array &$page) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  if ($theme === 'seven') {
    return;
  }

  // Common paths.
  $path_to_theme = \Drupal::theme()->getActiveTheme()->getPath();
  $path_to_at_core = drupal_get_path('theme', 'at_core');

  if (!empty($config['generated_files_path'])) {
    $generated_files_path = $config['generated_files_path'];
  }
  else {
    drupal_set_message(t('The path to generated CSS files is not saved in configuration, try saving your themes Appearance settings.'), 'error');
  }

  // Load this themes base library.
  $page['#attached']['library'][] = "$theme/base";

  // Attach module dependant libraries.
  // These libraries are declared in your themeName.libraries.yml
  // and we only load if the module is installed. Unlike core
  // these files will load on every page, so when CSS aggregation
  // is on there will only be one CSS aggregate for the theme.
  $module_libraries = array(
    'book',
    'comment',
    'forum',
    'search',
    'taxonomy',
  );
  foreach ($module_libraries as $module_library) {
    if (\Drupal::moduleHandler()->moduleExists($module_library) == TRUE) {
      $page['#attached']['library'][] = "$theme/$module_library";
    }
  }

  // Color library.
  // We load this always, if color module is enabled it will rewrite the files
  // from this library (as declared in color.inc etc).
  $page['#attached']['library'][] = "$theme/color";

  // We always load fastclick, at least for now this is a hard requirement of the theme.
  $page['#attached']['library'][] = 'at_core/at.fastclick_initialize';

  // Process extension settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {

    // Initialize a variable to collect head elements, we're going to hammer this.
    $head_elements = array();

    // Fonts.
    if (isset($config['enable_fonts']) && $config['enable_fonts'] === 1) {

      if (file_exists($generated_files_path . '/fonts.css')) {
        $page['#attached']['library'][] = "$theme/fonts";
      }

      // An ugly trial and error hack on html_head to add a stylesheet link. This is not
      // very pretty but it does work, however I have elected to go with the @import
      // method since this is easier for low-tech users to use.
      /*
      if (!empty($config['font_google'])) {
        $safe_google_fonts = Xss::filter($config['font_google']);
        $head_elements['font_google'] = array(
          '#type' => 'html_tag',
          '#tag' => 'link',
          '#weight' => 1000,
          '#attributes' => array(
            'href' => $safe_google_fonts,
            'rel' => 'stylesheet',
          ),
        );
      }
      */

      // With Typekit we can do things sensibly and use drupalSettings and load a script file.
      if (!empty($config['font_typekit'])) {
        $tfk = String::checkPlain($config['font_typekit']);
        $page['#attached']['drupalSettings'][$theme]['tkf'] = $tfk;
        $page['#attached']['library'][] = 'at_core/at.typekit_fonts';
      }
    }

    // Titles.
    if (isset($config['enable_titles']) && $config['enable_titles'] === 1) {
      if (file_exists($generated_files_path . '/title-styles.css')) {
        $page['#attached']['library'][] = "$theme/title_styles";
      }
    }

    // Breadcrumbs.
    if (!empty($config['breadcrumb_separator'])) {
      if (file_exists($generated_files_path . '/breadcrumb.css')) {
        $page['#attached']['library'][] = "$theme/breadcrumb";
      }
    }

    // Login block.
    if (\Drupal::currentUser()->isAuthenticated() === FALSE) {
      if (isset($config['horizontal_login_block']) && $config['horizontal_login_block'] === 1) {
        if (file_exists($generated_files_path . '/login-block.css')) {
          $page['#attached']['library'][] = "$theme/login_block";
        }
      }
    }

    // Custom CSS.
    if (isset($config['enable_custom_css']) && $config['enable_custom_css'] === 1) {
      if (file_exists($generated_files_path . '/custom-css.css')) {
        $page['#attached']['library'][] = "$theme/custom_css";
      }
    }

    // Attach Windowsize library
    if (isset($config['show_window_size']) && $config['show_window_size'] === 1) {
      $page['#attached']['library'][] = 'at_core/at.windowsize';
    }

    // Attach devel_layout CSS file.
    if (isset($config['devel_layout']) && $config['devel_layout'] === 1) {
       $page['#attached']['library'][] = 'at_core/at.devel_debug_layout';
    }

    // Attach devel_colorize-regions CSS file.
    if ((isset($config['devel_color_regions']) && $config['devel_color_regions'] === 1) && (isset($config['devel_layout']) && $config['devel_layout'] === 0)) {
      $page['#attached']['library'][] = 'at_core/at.devel_colorize_regions';
    }

    // Attach nuke_toolbar CSS file.
    if (isset($config['nuke_toolbar']) && $config['nuke_toolbar'] === 1) {
      $page['#attached']['library'][] = 'at_core/at.devel_nuke_toolbar';
    }

    // Shortcodes
    if (isset($config['enable_shortcodes']) && $config['enable_shortcodes'] === 1) {
      $page['#attached']['library'][] = "$theme/shortcodes";
    }

    // Add the responsive menu styles settings.
    if (isset($config['enable_responsive_menus']) && $config['enable_responsive_menus'] === 1) {

      // Load RM CSS styles.
      $page['#attached']['library'][] = "$theme/responsive_menus";

      $drupalSettings = array();

      // Breakpoint
      if (isset($config['responsive_menu_breakpoint'])) {
        $drupalSettings['bp'] = $config['responsive_menu_breakpoint'];
      }

      // Loop the config settings and build an array for drupalSettings.
      foreach (array('default', 'responsive') as $style) {
        if (isset($config['responsive_menu_' . $style . '_style'])) {
          $drupalSettings[$style] = 'ms-' . $config['responsive_menu_' . $style . '_style'];
        }
      }

      // Attach JS settings.
      $page['#attached']['drupalSettings'][$theme]['rm'] = $drupalSettings;
    }

    // Attach polyfills to support IE8.
    if ((isset($config['enable_legacy_browsers']) && $config['enable_legacy_browsers'] === 1) && (isset($config['legacy_browser_polyfills']) && $config['legacy_browser_polyfills'] === 1)) {
      $page['#attached']['library'][] = 'at_core/at.respond';
      $page['#attached']['library'][] = 'at_core/at.selectivizr'; // this will load yui3 as a dependancy because it supports IE8 and Selectivizr runs way better on yui3.
    }

    // Apple touch icons - low, medium and high (see the Apple docs on touch icons).
    if (isset($config['enable_touch_icons']) && $config['enable_touch_icons'] === 1) {
      $rel = 'apple-touch-icon';
      if (isset($config['apple_touch_icon_precomposed']) && $config['apple_touch_icon_precomposed'] === 1) {
        $rel = 'apple-touch-icon-precomposed';
      }

      // Apple default icon and Nokia shortcut icon.
      if (isset($config['icon_path_default']) && !empty($config['icon_path_default'])) {
        $icon_path_default = String::checkPlain($config['icon_path_default']);
        $default_icon = file_create_url($path_to_theme . '/' . $icon_path_default);
        $head_elements['at_core_touch_icon_nokia'] = array(
          '#type' => 'html_tag',
          '#tag' => 'link',
          '#weight' => -97,
          '#attributes' => array(
            'href' => $default_icon,
            'rel' => "shortcut icon",
          ),
        );
        $head_elements['at_core_touch_icon_default'] = array(
          '#type' => 'html_tag',
          '#tag' => 'link',
          '#weight' => -98,
          '#attributes' => array(
            'href' => $default_icon,
            'rel' => $rel,
          ),
        );
      }

      // iPad (standard display).
      if (isset($config['apple_touch_icon_path_ipad']) && !empty($config['apple_touch_icon_path_ipad'])) {
        $apple_touch_icon_path_ipad = String::checkPlain($config['apple_touch_icon_path_ipad']);
        $head_elements['at_core_touch_icon_ipad'] = array(
          '#type' => 'html_tag',
          '#tag' => 'link',
          '#weight' => -99,
          '#attributes' => array(
            'href' => file_create_url($ipad_icon_path = $path_to_theme . '/' . $apple_touch_icon_path_ipad),
            'rel' => $rel,
            'sizes' => "76x76",
          ),
        );
      }

      // iPhone retina.
      if (isset($config['apple_touch_icon_path_iphone_retina']) && !empty($config['apple_touch_icon_path_iphone_retina'])) {
        $apple_touch_icon_path_iphone_retina = String::checkPlain($config['apple_touch_icon_path_iphone_retina']);
        $head_elements['at_core_touch_icon_iphone_retina'] = array(
          '#type' => 'html_tag',
          '#tag' => 'link',
          '#weight' => -100,
          '#attributes' => array(
            'href' => file_create_url($iphone_retina_icon_path = $path_to_theme . '/' . $apple_touch_icon_path_iphone_retina),
            'rel' => $rel,
            'sizes' => "120x120",
          ),
        );
      }

      // iPad retina.
      if (isset($config['apple_touch_icon_path_ipad_retina']) && !empty($config['apple_touch_icon_path_ipad_retina'])) {
        $apple_touch_icon_path_ipad_retina = String::checkPlain($config['apple_touch_icon_path_ipad_retina']);
        $head_elements['at_core_touch_icon_ipad_retina'] = array(
          '#type' => 'html_tag',
          '#tag' => 'link',
          '#weight' => -100,
          '#attributes' => array(
            'href' => file_create_url($ipad_retina_icon_path = $path_to_theme . '/' . $apple_touch_icon_path_ipad_retina),
            'rel' => $rel,
            'sizes' => "152x152",
          ),
        );
      }

      // Load touch icons.
      if (!empty($head_elements)) {
        foreach ($head_elements as $head_element_key => $head_element_value) {
          $page['#attached']['html_head'][] = [$head_element_value, $head_element_key];
        }
      }
    }
  }
}


/**
 * Alter CSS files before they are output on the page.
 *
 * @param $css
 *   An array of all CSS items (files and inline CSS) being requested on the page.
 *
 * @see _drupal_add_css()
 * @see drupal_get_css()
 */
function at_core_css_alter(&$css) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Individual CSS files to remove.
  // Sometimes we don't want to remove the entire library as it may
  // load dependancies we need, so we can use this more granular
  // approach to remove individual CSS assets.
  $remove = array(
    'book.theme.css',
    'comment.theme.css',
    'file.formatter.generic.css',
    'forum.module.css',
    'search.theme.css',
    'system.theme.css',
    'taxonomy.module.css',
  );
  foreach ($remove as $file) {
    if (array_key_exists($file, $css)) {
      unset($css[$file]);
    }
  }

  // Layout
  //
  // Since https://www.drupal.org/node/2382533 CSS/JS assets cannot be loaded without a library
  // and since themes cannot fire hook_libraries_alter() https://www.drupal.org/node/2050269
  // and we don't yet have dynamic libraries https://www.drupal.org/node/2358981
  // I have no recourse but to hack hook_css_alter() to load the layout files. Hooray for
  // hook_css_alter().
  //
  // This determines the page suggestion for the current page and checks if there is an
  // existing config key for that suggestion, then loads a layout CSS file appropriatly.
  if (isset($config['layouts_enable']) && $config['layouts_enable'] === 1) {

    // If we don't have the base path to generated files throw an error.
    if (!empty($config['generated_files_path'])) {
      $generated_files_path = $config['generated_files_path'];
    }
    else {
      drupal_set_message(t('The path to generated CSS files is not saved in configuration, try saving your themes layout settings.'), 'error');
    }

    // Get theme registry.
    $theme_registry = \Drupal::service('theme.registry')->getRuntime();

    // Build an array of path arguments to pass to theme_get_suggestions()
    $path = \Drupal::request()->getPathInfo();
    $path_args = explode('/', $path);

    // This is the front page.
    if (empty($path_args[1])) {
      $path_args = [''];
    }

    // Unset the first item in the array, othewise delimeters are doubled, don't ask me why.
    unset($path_args[0]);
    $path_args = array_values($path_args);

    // Add node type suggestion.
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $path_args[] = $node->getType();
    }

    // Get page suggestions, loop, check for a config key and break
    // if/when we have a match in the registry.
    if ($suggestions = theme_get_suggestions($path_args, 'page')) {
      foreach ($suggestions as $suggestion) {
        if (isset($config['suggestions'][$suggestion])) {
          $suggestions_layout = $config['suggestions'][$suggestion];
          $suggestions_layout = str_replace('_', '-', $suggestions_layout);
        }
        if ($theme_registry->has($suggestion)) {
          break;
        }
      }
    }

    // Get the layout, fallback to the default layout if for some reason it does
    // not exists, perhaps it was deleted by mistake etc.
    if (isset($suggestions_layout) && file_exists($generated_files_path . '/' . $theme . '.layout.'  . $suggestions_layout . '.css')) {
      $layout = $theme . '.layout.'  . $suggestions_layout . '.css';
    }
    else {
      $layout = $theme . '.layout.page.css';
    }

    // And you thought loading CSS assets in Drupal was getting easier, lol, don't kid yourself.
    $css[$layout] = array(
      'weight' => 0,
      'group' => 100,
      'type' => 'file',
      'data' => $generated_files_path . '/' . $layout,
      'version' => '8.0.0-dev',
      'every_page' => false,
      'media' => 'all',
      'preprocess' => true,
      'browsers' => array ('IE' => true, '!IE' => true),
      'basename' => $layout,
    );
  }

  // Drupal is stupid, again, so we have to load our own colorized CSS file, for f'ks sake.
  if (\Drupal::moduleHandler()->moduleExists('color') == TRUE) {
    $color_paths = \Drupal::config('color.theme.' . $theme)->get('stylesheets');
    if (!empty($color_paths)) {
      foreach ($color_paths as $color_path) {
        $basename_color_path = drupal_basename($color_path);
        if (array_key_exists($basename_color_path, $css)) {
          $css[$basename_color_path]['data'] = $color_path;
        }
      }
    }
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * TODO: keep on on core regarding the alter hook and suggestions - https://drupal.org/node/2100775
 */
function at_core_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Add content type suggestions.
  if ($node = \Drupal::request()->attributes->get('node')) {
    array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
  }

  // Show template suggestions.
  if (isset($config['show_page_suggestions']) && $config['show_page_suggestions'] === 1) {
    if ($suggestions) {
      foreach ($suggestions as $suggestion_name) {
        $formatted_suggestions[] = '<div>' . str_replace('_', '-', $suggestion_name) . '</div>';
      }
      $these_suggestions = implode($formatted_suggestions);
      drupal_set_message(t('Template suggestions for this page:<br>!these_suggestions <p>To stop showing these turn it off in your themes Appearance settings - see the Devel tab.</p>', array('!these_suggestions' => $these_suggestions)), 'status');
    }
  }
}


/**
 * hook_form_FORM_ID_alter()
 * Modify the User Login Block Form
 */
function at_core_form_user_login_form_alter(&$form, &$form_state, $form_id) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Login block mods.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {

      // Placeholders.
      if (isset($config['login_block_placeholder_labels']) && $config['login_block_placeholder_labels'] === 1) {
        $form['name']['#attributes']['placeholder'] = $form['name']['#title'];
        $form['pass']['#attributes']['placeholder'] = $form['pass']['#title'];
        $form['name']['#title_display'] = 'invisible';
        $form['pass']['#title_display'] = 'invisible';
      }
    }
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * TODO: keep on on https://drupal.org/node/2247677, this might add these suggestions in which case
 * we can remove this.
 */
function at_core_theme_suggestions_user_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'user__' . $variables['elements']['#view_mode'];
}


/**
 * Preprocess variables for html templates.
 */
function at_core_preprocess_html(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Add a "site name" body classes for advanced theming of multi-sites.
  if ($variables['head_title_array']['name']) {
    $variables['attributes']['class'][] = 'site-name--' . Html::getClass($variables['head_title_array']['name']);
  }

  // Set the skip navigation target ID
  $variables['skip_link_target'] = '#block-' . $theme . '-content';

  // Extensions
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {

    // Skip navigation target setting.
    if (isset($config['skip_link_target'])) {
      $variables['skip_link_target'] = '#' . Html::getClass($config['skip_link_target']);
    }

    // Add the responsive menu styles settings.
    if (isset($config['enable_responsive_menus']) && $config['enable_responsive_menus'] === 1) {
      $variables['attributes']['class'][] = 'no-fouc';
    }
  }

  // Add theme name class, using this for debugging in development since I switch
  // themes a lot and need to know which one I am looking at, could be removed later on?
  $variables['attributes']['class'][] = 'theme-name--' . Html::getClass($theme);
}


/**
 * Preprocess variables for page templates.
 */
function at_core_preprocess_page(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Initialise attribution variable.
  $variables['attribution'] = '';

  // Process extension settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    // Markup overrides.
    if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {
      // Set attribution.
      if (isset($config['attribution_toggle']) && $config['attribution_toggle'] === 1) {
        $variables['attribution'] = '<div class="attribution"><a href="http://adaptivethemes.com" target="_blank">Design by Adaptivethemes.com</a></div>';
      }
    }
  }

  // Layout Attributes
  // Add dynamic classes to each region wrapper (.regions).
  // This adds two classes to every wrapper:
  //  - "arc--[n]" describes the number of active regions in this row, e.g. "arc-2".
  //  - "hr--[n-n etc]" describes the active regions by source order, so if there are
  //    3 regions and the first and third regions are active the class is "hr--1-3".
  $regions = system_region_list($theme, REGIONS_VISIBLE);
  $active_regions = array();

  // This is bad, Drupal can populate the region but not print anything, perhaps
  // due to user permissions, such as the Tools and Search blocks on a standard install.
  // In effect this breaks the layout, or at the very least disturbs the layout by giving
  // false positives, which results in the wrong layout classes being generated.
  // This is a critical issue in D8 (and D7 also): https://www.drupal.org/node/953034
  foreach ($regions as $region_name => $region_label) {
    if (!empty($variables['page'][$region_name])) {
      // Call drupal_render() to determine the regions visibility.
      if ($region = drupal_render($variables['page'][$region_name])) {
        $active_regions[] = $region_name;
      }
    }
  }

  if (!empty($active_regions)) {
    $variables['attributes']['class'][] = 'page';

    // This is where the heavy lifting takes place.
    $layout_loaded = new LayoutLoad($theme, $active_regions);
    $row_attributes = $layout_loaded->rowAttributes();

    // Check if we have attributes to avoid a fatal error.
    if (empty($row_attributes)) {
      drupal_set_message(t('Bummer, something went wrong. Check the themes Appearance settings, or maybe the layout yml is borked?'), 'error');
    }
    else {
      $variables += $row_attributes;
    }
  }
}

/**
 * Preprocess variables for region templates.
 */
function at_core_preprocess_region(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // This could be expensive to call so many times on the page.
  $layout_loaded = new LayoutLoad($theme, $active_regions = NULL);
  $region_row = $layout_loaded->regionAttributes($variables['region']);
  if (!empty($region_row)) {
    $variables['region_row'] = $region_row;
  }

  //$variables['attributes']['class'][] = 'pr-' . $region_row . '__' . $variables['region'];

  // Set wrapper element.
  $variables['html_element'] = 'div';
  if ($variables['region'] == 'content') {
    //$variables['html_element'] = 'main';
    //$variables['attributes']['role'][] = 'main';
  }

  // Extension settings
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    // shortcodes classes.
    if (isset($config['enable_shortcodes']) && $config['enable_shortcodes'] === 1) {
      if (!empty($config['page_classes_region_' . $variables['region']])) {
        $shortcodes = Tags::explode($config['page_classes_region_' . $variables['region']]);
        foreach ($shortcodes as $class) {
          $variables['attributes']['class'][] = Html::getClass($class);
        }
      }
    }
  }
}

/**
 * Preprocess variables for node templates.
 */
function at_core_preprocess_node(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');
  $node = $variables['node'];

  // shortcodes classes.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_shortcodes']) && $config['enable_shortcodes'] === 1) {
      if (!empty($config['nodetype_classes_' . $node->getType()])) {
        $shortcodes = Tags::explode($config['nodetype_classes_' . $node->getType()]);
        foreach ($shortcodes as $class) {
          $variables['attributes']['class'][] = Html::getClass($class);
        }
      }
    }
  }

  // Header and Footer attributes.
  $variables['header_attributes'] = new Attribute(array('class' => array()));
  $variables['footer_attributes'] = new Attribute(array('class' => array()));

  // Unpublished status message.
  if ($node->isPublished() === FALSE) {
    $variables['title_prefix']['status'] = array(
      '#markup' => t('Node unpublished'),
      '#prefix' => '<p class="unpublished clearfix" aria-label="Status message" role="contentinfo">',
      '#suffix' => '</p>',
    );
  }

  // Set attribute classes. TODO: move to template?
  $variables['header_attributes']['class'][] = 'node__header';
  $variables['title_attributes']['class'][] = 'node__title';
  $variables['content_attributes']['class'][] = 'node__content';
  $variables['footer_attributes']['class'][] = 'node__footer';


  // SEE https://drupal.org/node/2004252 or a follow up issue.
  if ($variables['display_submitted']) {

    // Add a class to the header if submitted is active, so we can theme dynamcially.
    $variables['header_attributes']['class'][] = 'node__header--has-meta';

    // Initialize new attributes arrays.
    $variables['meta_attributes'] = new Attribute(array('class' => array()));
    $variables['meta_attributes']['class'][] = 'node__meta';

    $variables['submitted_attributes'] = new Attribute(array('class' => array()));
    $variables['submitted_attributes']['class'][] = 'node__submitted';

    // Node author classes
    $variables['author_attributes']['class'] = array();
    $variables['author_attributes']['class'][] = 'node__author';

    // Seriously, we actually need to do this?
    $rdf_module = \Drupal::moduleHandler()->moduleExists('rdf');
    if ($rdf_module == FALSE) {
      $variables['author_attributes']['rel'] = array();
    }
    $variables['author_attributes']['rel'][] = 'author';

    // add a class if author picture is printing.
    if (!empty($variables['author_picture'])) {
      $variables['meta_attributes']['class'][] = 'node__meta--has-author-picture';
    }
  }
}


/**
 * Preprocess variables for comment templates.
 */
function at_core_preprocess_comment(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  $comment = $variables['elements']['#comment'];
  $account = comment_prepare_author($comment);

  // Initialize new attribute arrays.
  $variables['submitted_attributes'] = new Attribute(array('class' => array()));
  //$variables['footer_attributes'] = new Attribute(array('class' => array()));

  // Clean up user picture and add has class.
  // TODO: review before release: https://www.drupal.org/node/2247677
  // TODO: recheck what we are doing with node user pictures???
  if (theme_get_setting('features.comment_user_picture')) {
    $user_picture = user_view($account, 'compact');

    // Get rid of the user article wrapper when there is a user picture and
    // output nothing when there isn't.
    if (array_key_exists('#items', $user_picture['user_picture'])) {
      $variables['user_picture'] = $user_picture['user_picture'];
      $variables['submitted_attributes']['class'][] = 'comment__submitted--has-user-picture';
    }
    else {
      $variables['user_picture'] = array();
    }
  }
  else {
    $variables['user_picture'] = array();
  }

  // Hide comment titles.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {
      if (isset($config['comments_hide_title']) && $config['comments_hide_title'] === 1) {
        $variables['title_attributes']['class'][] = 'visually-hidden';
      }
    }
  }

  // Unpublished status message.
  if ($variables['status'] == 'unpublished') {
    $variables['title_prefix']['status'] = array(
      '#markup' => t('Comment unpublished'),
      '#prefix' => '<p class="unpublished clearfix" aria-label="Status message" role="contentinfo">',
      '#suffix' => '</p>',
    );
  }

  // Reset submitted variable.
  if (!empty($variables['submitted'])) {
    $variables['submitted'] = t('Submitted by <address class="comment__author" rel="author">!username</address> on <time class="comment__datetime">!datetime</time>', array(
      '!username' => $variables['author'],
      '!datetime' => $variables['created'],
    ));
  }

  // TODO: move to template when comment template is finished!
  foreach ($variables['attributes']['class'] as $class) {
    if ($class !== 'comment') {
      $variables['attributes']['class'] = str_replace($class, 'comment--' . $class, $variables['attributes']['class']);
    }
  }
}


/**
 * Preprocess variables for block templates.
 */
function at_core_preprocess_block(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Extension settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    // Responsive menu block.
    if (isset($config['responsive_menu_block'])) {
      if ($variables['elements']['#id'] == $config['responsive_menu_block']) {
        $variables['attributes']['class'][] = 'rm-block';
        $variables['title_attributes']['class'][] = 'rm-toggle';
        $variables['title_attributes']['aria-controls'][] = 'rm-content';
        $variables['content_attributes']['id'][] = 'rm-content';
        $variables['content_attributes']['class'][] = 'rm-block__content';
      }
    }

    // Remove login block links.
    if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {
      if ((isset($config['login_block_remove_links']) && $config['login_block_remove_links'] === 1) || (isset($config['horizontal_login_block']) && $config['horizontal_login_block'] === 1)) {
        if ($variables['plugin_id'] == 'user_login_block') {
          unset($variables['content']['user_links']);

          // Add class for horizontal login.
          if (isset($config['horizontal_login_block']) && $config['horizontal_login_block'] === 1) {
            $variables['attributes']['class'][] = 'block-login--horizontal';
          }
        }
      }
    }

    // Shortcodes classes.
    if (isset($config['enable_shortcodes']) && $config['enable_shortcodes'] === 1) {
      if (!empty($config['block_classes_' . $variables['elements']['#id']])) {
        $shortcodes = Tags::explode($config['block_classes_' . $variables['elements']['#id']]);
        foreach ($shortcodes as $class) {
          $variables['attributes']['class'][] = Html::getClass($class);
        }
      }
    }
  }
}


/**
 * Preprocess variables for field templates.
 * SEE: https://drupal.org/node/1987398 field.module - Convert theme_ functions to Twig
 */
function at_core_preprocess_field(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Extension settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_images']) && $config['enable_images'] === 1) {

      if ($variables['element']['#field_type'] == 'image') {

        $entity_type = $variables['element']['#entity_type'];
        $node_type = $variables['element']['#bundle'];
        $view_mode = $variables['element']['#view_mode'];

        // Reset items array to first item only. This causes only the first image to be shown, e.g. in teaser view mode.
        if (isset($config['image_count_' . $node_type . '_' . $entity_type . '_' . $view_mode]) && $config['image_count_' . $node_type . '_' . $entity_type . '_' . $view_mode] === 1) {
          $item = reset($variables['items']);
          $variables['items'] = array($item);
        }

        // Captions.
        if (isset($config['image_captions_' . $node_type . '_' . $entity_type . '_' . $view_mode]) && $config['image_captions_' . $node_type . '_' . $entity_type . '_' . $view_mode] === 1) {
          foreach ($variables['items'] as $delta => $item) {
            $values = $item['content']['#item']->getValue();

            if (!empty($values['title'])) {
              $variables['items'][$delta]['caption'] = array(
                'show' => TRUE,
                'title' => $values['title'],
              );

              if (!empty($item['content']['#image_style'])) {
                $style = entity_load('image_style', $item['content']['#image_style']);
                $dimensions = array(
                  'width' => $values['width'],
                  'height' => $values['height'],
                );
                $style->transformDimensions($dimensions);
                $variables['items'][$delta]['caption']['width'] = $dimensions['width'] . 'px';
                $variables['items'][$delta]['caption']['height'] = $dimensions['height'] . 'px';
              }
            }
            else {
              $variables['items'][$delta]['caption'] = array(
                'show' => FALSE,
              );
            }
          }
        }

        // Image align class
        if (!empty($config['image_alignment_' . $node_type . '_' . $entity_type . '_' . $view_mode])) {
          $variables['attributes']['class'][] = 'align-' . $config['image_alignment_' . $node_type . '_' . $entity_type . '_' . $view_mode];
        }

        // This is quite aggressive and it may be better to let the site fail?
        foreach ($variables['items'] as $delta => $item) {
          if (empty($item['content']['#image_style'])) {
            $variables['attributes']['class'][] = 'float-none';
          }
        }
      }
    }
  }
}


/**
 * Preprocess variables for breadcrumb templates.
 * SEE: https://drupal.org/node/1987398 field.module - Convert theme_functions to Twig
 */
function at_core_preprocess_breadcrumb(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // New attributes array for breadcrumb title.
  $variables['title_attributes'] = new Attribute(array('class' => array()));

  // Set attributes.
  $variables['breadcrumb_title_hidden'] = TRUE;

  // Theme settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {

      // Show or hide the label.
      if (isset($config['breadcrumb_label']) && $config['breadcrumb_label'] === 1) {
        $variables['breadcrumb_title_hidden'] = FALSE;
      }

      // Show or hide the Home link.
      if (isset($config['breadcrumb_home']) && $config['breadcrumb_home'] === 0) {

        $first_item = array_shift($variables['breadcrumb']);
        if (isset($first_item['text']['url']) && $first_item['text']['url'] == base_path()) {
          array_shift($variables['breadcrumb']);
        }
      }

      // Page title
      if (isset($config['breadcrumb_title']) && $config['breadcrumb_title'] === 1) {
        $request = \Drupal::request();
        if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
          $title = \Drupal::service('title_resolver')->getTitle($request, $route);

          if (!empty($title)) {
            $variables['breadcrumb'][]['text'] = String::checkPlain($title);
          }
        }
      }
    }
  }
}


/**
 * Preprocess variables for user templates.
 */
function at_core_preprocess_user(&$variables) {
  // Add a proper label for user profiles.
  $user = $variables['elements']['#user'];
  $variables['label'] = $user->getUsername();
}


/**
 * Preprocess variables for user templates.
 */
function at_core_preprocess_views_view(&$variables) {
  $theme = \Drupal::theme()->getActiveTheme()->getName();
  $config = \Drupal::config($theme . '.settings')->get('settings');

  // Theme settings.
  if (isset($config['enable_extensions']) && $config['enable_extensions'] === 1) {
    if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {
      if (isset($config['views_hide_feedicon']) && $config['views_hide_feedicon'] === 1) {
        $variables['feed_icons'] = array();
      }
    }
  }
}





// Functions for tests and possible future usage.
//function at_core_node_links_alter(array &$node_links, NodeInterface $node, array &$context) {}
//
//function at_core_preprocess_menu(&$variables) {}




/*
  // Layout
  // This determines the page suggestion for the current page and checks if there is an
  // existing config key for that suggestion, if so assume a css file exists and try to
  // load it.
  if (isset($config['layouts_enable']) && $config['layouts_enable'] === 1) {

    // Get theme registry.
    $theme_registry = \Drupal::service('theme.registry')->getRuntime();

    // Is this the front page or?
    if ($variables['is_front'] === TRUE) {
      $page_args = [''];
    }
    else {
      //$page_args = explode('/', Url::fromRoute('<current>')->getInternalPath()); // getInternalPath deprecated?
      $page_args = explode('/', Url::fromRoute('<current>'));
    }

    //$otherargs = explode('/', Url::fromRoute('<current>'));
    //var_dump($page_args);
    //var_dump($otherargs);

    // Add node type suggestion.
    if (isset($variables['node'])) {
      $page_args[] = $variables['node']->getType();
    }

    // Get page suggestions, loop, check for a config key, then break
    // if/when we have a match.
    if ($suggestions = theme_get_suggestions($page_args, 'page', '__')) {
      foreach ($suggestions as $suggestion) {
        if (isset($config['suggestions'][$suggestion])) {
          $suggestions_layout = $config['suggestions'][$suggestion];
          $suggestions_layout = str_replace('_', '-', $suggestions_layout);
        }
        if ($theme_registry->has($suggestion)) {
          break;
        }
      }
    }

    // If there is no layout for this suggestion load the default.
    if (isset($suggestions_layout) && file_exists($generated_files_path . '/' . $theme . '.layout.'  . $suggestions_layout . '.css')) {
      $layout = $generated_files_path . '/' . $theme . '.layout.'  . $suggestions_layout . '.css';
    }
    else {
      $layout = $generated_files_path . '/' . $theme . '.layout.page.css';
    }

    // Attach the layout.
    //$variables['#attached']['css'][] = array(
    //  'type' => 'file',
    //  'data' => $layout,
    //  'every_page' => TRUE,
    //  'group' => CSS_AGGREGATE_THEME,
    //  'weight' => CSS_LAYOUT,
    //);
  }
*/

    //$load_failure = array();
    //$load_failure['fail'] = FALSE;

    // Fonts.
    //if (isset($config['enable_fonts']) && $config['enable_fonts'] === 1) {
    //  $fonts_file = $generated_files_path . '/' . $theme . '.fonts.css';
    //  if (file_exists($fonts_file)) {
    //    $page['#attached']['css'][] = array(
    //      'type' => 'file',
    //      'data' => $fonts_file,
    //      'group' => CSS_AGGREGATE_THEME,
    //      'weight' => CSS_THEME,
    //    );
    //  }
    //  else {
    //    $load_failure['fail'] = TRUE;
    //    $load_failure['files'][] = $fonts_file;
    //  }
    //
    //  // Google font.
    //  if (!empty($config['font_google'])) {
    //    $google_font_path = check_url($config['font_google']);
    //    $google_font_path_clean = '//' . str_replace('&amp;', '&', $google_font_path);
    //    $page['#attached']['css'][] = array(
    //      'data' => $google_font_path_fixed,
    //      'type' => 'external',
    //    );
    //  }
    //
    //  // Typekit script.
    //  if (!empty($config['font_typekit'])) {
    //    $typekit_script_path = '//' . check_url($config['font_typekit']);
    //    $page['#attached']['js'][] = array(
    //      'data' => $typekit_script_path,
    //      'type' => 'external',
    //      'weight' => CSS_THEME,
    //    );
    //  }
    //}
    //
    //// Titles CSS.
    //if (isset($config['enable_titles']) && $config['enable_titles'] === 1) {
    //  $titles_file = $generated_files_path . '/' . $theme . '.titles.css';
    //  if (file_exists($titles_file)) {
    //    $page['#attached']['css'][] = array(
    //      'type' => 'file',
    //      'data' => $titles_file,
    //      'group' => CSS_AGGREGATE_THEME,
    //      'weight' => CSS_THEME,
    //    );
    //  }
    //  else {
    //    $load_failure['fail'] = TRUE;
    //    $load_failure['files'][] = $titles_file;
    //  }
    //}

    // Images CSS.
    // TODO - needs more testing since we moved to a class attr only approach, rather than writing CSS.
    /*
    if (isset($config['enable_images']) && $config['enable_images'] === 1) {
      $images_file = $generated_files_path . '/' . $theme . '.images.css';
      if (file_exists($images_file)) {
        $page['#attached']['css'][] = array(
          'type' => 'file',
          'data' => $images_file,
          'group' => CSS_AGGREGATE_THEME,
          'weight' => CSS_THEME,
        );
      }
      else {
        $load_failure['fail'] = TRUE;
        $load_failure['files'][] = $images_file;
      }
    }
    */

    // Custom CSS.
    //if (isset($config['enable_custom_css']) && $config['enable_custom_css'] === 1) {
    //  $custom_css_file = $generated_files_path . '/' . $theme . '.custom-css.css';
    //  if (file_exists($custom_css_file)) {
    //    $page['#attached']['css'][] = array(
    //      'type' => 'file',
    //      'data' => $custom_css_file,
    //      'group' => CSS_AGGREGATE_THEME,
    //      'weight' => CSS_THEME,
    //    );
    //  }
    //  else {
    //    $load_failure['fail'] = TRUE;
    //    $load_failure['files'][] = $custom_css_file;
    //  }
    //}
    //
    //// Show grid.
    //if (isset($config['show_grid']) && $config['show_grid'] === 1) {
    //  $show_grid_file = $path_to_theme . '/styles/css/show-grid.css';
    //  if (file_exists($show_grid_file)) {
    //    $page['#attached']['css'][] = array(
    //      'type' => 'file',
    //      'data' => $show_grid_file,
    //      'group' => CSS_AGGREGATE_THEME,
    //      'weight' => CSS_THEME,
    //    );
    //  }
    //}
    //
    //// Markup overrides.
    //if (isset($config['enable_markup_overrides']) && $config['enable_markup_overrides'] === 1) {
    //
    //  // Breadcrumbs.
    //  if ($config['breadcrumb_label'] === 1 || $config['breadcrumb_separator'] === 1) {
    //    $breadcrumb_file = $generated_files_path . '/' . $theme . '.breadcrumb.css';
    //    if (file_exists($breadcrumb_file)) {
    //      $page['#attached']['css'][] = array(
    //        'type' => 'file',
    //        'data' => $breadcrumb_file,
    //        'group' => CSS_AGGREGATE_THEME,
    //        'weight' => CSS_THEME,
    //      );
    //    }
    //    else {
    //      $load_failure['fail'] = TRUE;
    //      $load_failure['files'][] = $breadcrumb_file;
    //    }
    //  }
    //
    //  // Login block.
    //  if (\Drupal::currentUser()->isAuthenticated() === FALSE) {
    //    if (isset($config['horizontal_login_block']) && $config['horizontal_login_block'] === 1) {
    //      $login_block_file = $generated_files_path . '/' . $theme . '.login-block.css';
    //      if (file_exists($login_block_file)) {
    //        $page['#attached']['css'][] = array(
    //          'type' => 'file',
    //          'data' => $login_block_file,
    //          'group' => CSS_AGGREGATE_THEME,
    //          'weight' => CSS_THEME,
    //        );
    //      }
    //      else {
    //        $load_failure['fail'] = TRUE;
    //        $load_failure['files'][] = $login_block_file;
    //      }
    //    }
    //  }
    //}

    // Print a message if required files do not exist.
    //if ($load_failure['fail'] == TRUE) {
    //  $item_list = array(
    //    '#theme' => 'item_list',
    //    '#items' => $load_failure['files'],
    //  );
    //  $failed_files_list = drupal_render($item_list);
    //  drupal_set_message(t('<p>One or more generated CSS files not found:</p> !failuers <p>Go to this themes Appearance settings and click <em>Save extension settings</em> to generate new files.</p>', array('!failuers' => $failed_files_list)), 'error');
    //}


    // Attach Livereload snippet (inline)
    //if (isset($config['livereload']) && $config['livereload'] === 1) {
    //  $livereload_snippet = '';
    //  if (isset($config['livereload_snippet'])) {
    //    $page['#attached']['js'][] = array(
    //      'data' => $config['livereload_snippet'],
    //      'type' => 'inline',
    //    );
    //  }
    //}
