//
// Utility mixins and functions
// ---------------------------------------------------------------------------

// Markup free clearing
// http://www.stubbornella.org/content/2012/05/02/cross-browser-debugging-css/
@mixin cf {
  overflow: hidden;   // New formatting context in better browsers
  *overflow: visible; // Protect IE7 and older from the overflow property
  *zoom: 1;           // Give IE hasLayout, a new formatting context equivalent
}

// Image replacement
// Kellum Method: http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
// Extended by HTML5BP http://html5boilerplate.com/docs/css/
@mixin ir {
  display: block !important;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
  background-color: transparent;
}

// Hide content but maintain accessibility
@mixin visually-hidden {
  position: absolute !important;
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
  width: 1px;
  padding: 0;
  word-wrap: normal;
  font: 0/0 a;
}

// Turns off the element-invisible effect
@mixin visually-hidden-off {
  position: static !important;
  clip: auto;
  overflow: visible;
  height: auto;
  width: auto;
}

// Visually hidden but focusable, e.g. skip links
@mixin visually-hidden-focusable {
  @extend visually-hidden;
  &.focusable {
    &:active,
    &:focus {
      @include visually-hidden-off;
    }
  }
}

// Shift content offscreen, can be usefull when you reall need to do this
@mixin offscreen {
  position: absolute;
  top: -99999em;
  width: 1px;
  height: 1px;
  overflow: hidden;
  outline: 0;
}

// The word "Unpublished" displayed on unpublished nodes and comments
@mixin unpublished {
  color: rgba(239, 170, 170, 0.4);
  font-family: $impact;
  font-weight: 700;
  line-height: 1.2;
  margin: 10px 0;
  padding: 0;
  overflow: visible;
  text-align: center;
  text-transform: uppercase;
  word-wrap: break-word;
}


// Font smoothing
@mixin font-smoothing($value: antialiased) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}


// Convert font-size from px to rem with px fallback
//
// @param $size - the value in pixel you want to convert
//
// e.g. p {@include fontSize(12px);}
//
// https://github.com/stubbornella/oocss/blob/master/oocss/src/components/utils/_fontSize.scss
// Function for converting a px based font-size to rem.
@function pxtorem($size) {
  $remSize: $size / 16px;
  // Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
//@mixin font-size($size) {
//  font-size: $size;
//  font-size: calculateRem($size);
//}


































